{"ast":null,"code":"var _jsxFileName = \"/Users/maidar/Desktop/projects-d/gasp/src/context/configContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport axios from 'utils/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  createContext\n} = require(\"react\");\n\nexport const ConfigContext = createContext();\nexport default function ConfigContextProvider(props) {\n  _s();\n\n  /** Сайтын тохиргоонуудыг халгалах state */\n  const [configs, setConfigs] = useState({});\n  /** Тохиргоог back аас авах */\n\n  const getConfigs = async () => {\n    /** Back аас авах config үүдийн нэрийн жагсаалт */\n    const names = 'FACEBOOK,INSTAGRAMM,YOUTUBE';\n    const {\n      success,\n      data,\n      error\n    } = await axios.get(`/api/config/?names=${names}`).catch(err => err);\n\n    if (success) {\n      const valueOfConfigs = data.reduce((prevValue, currentValue) => {\n        prevValue[currentValue.name] = currentValue.value;\n        return prevValue;\n      }, {});\n      setConfigs(valueOfConfigs);\n    } else {\n      setConfigs({});\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ConfigContext.Provider, {\n    value: {\n      configs,\n      getConfigs\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ConfigContextProvider, \"9+F8SUqRLHGQGhVJhDRDdPoqkzY=\");\n\n_c = ConfigContextProvider;\nexport function useConfig() {\n  _s2();\n\n  return useContext(ConfigContext);\n}\n\n_s2(useConfig, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigContextProvider\");","map":{"version":3,"sources":["/Users/maidar/Desktop/projects-d/gasp/src/context/configContext.js"],"names":["useContext","useState","axios","createContext","require","ConfigContext","ConfigContextProvider","props","configs","setConfigs","getConfigs","names","success","data","error","get","catch","err","valueOfConfigs","reduce","prevValue","currentValue","name","value","children","useConfig"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AAEA,OAAOC,KAAP,MAAkB,aAAlB;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBC,OAAO,CAAC,OAAD,CAAjC;;AAEA,OAAO,MAAMC,aAAa,GAAGF,aAAa,EAAnC;AAEP,eAAe,SAASG,qBAAT,CAA+BC,KAA/B,EACf;AAAA;;AACI;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AAEA;;AACA,QAAMS,UAAU,GAAG,YACnB;AACI;AACA,UAAMC,KAAK,GAAG,6BAAd;AACA,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,IAAX;AAAiBC,MAAAA;AAAjB,QAA2B,MAAMZ,KAAK,CAACa,GAAN,CAAW,sBAAqBJ,KAAM,EAAtC,EAAyCK,KAAzC,CAA+CC,GAAG,IAAIA,GAAtD,CAAvC;;AACA,QAAIL,OAAJ,EACA;AACI,YAAMM,cAAc,GAAGL,IAAI,CAACM,MAAL,CACnB,CAACC,SAAD,EAAYC,YAAZ,KACA;AACID,QAAAA,SAAS,CAACC,YAAY,CAACC,IAAd,CAAT,GAA+BD,YAAY,CAACE,KAA5C;AACA,eAAOH,SAAP;AACH,OALkB,EAMnB,EANmB,CAAvB;AAQAX,MAAAA,UAAU,CAACS,cAAD,CAAV;AACH,KAXD,MAaA;AACIT,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH;AAEJ,GAtBD;;AAwBA,sBACI,QAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHD,MAAAA,OADG;AAEHE,MAAAA;AAFG,KADX;AAAA,cAMKH,KAAK,CAACiB;AANX;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAxCuBlB,qB;;KAAAA,qB;AA0CxB,OAAO,SAASmB,SAAT,GACP;AAAA;;AACI,SAAOzB,UAAU,CAACK,aAAD,CAAjB;AACH;;IAHeoB,S","sourcesContent":["import { useContext, useState } from \"react\";\n\nimport axios from 'utils/axios'\n\nconst { createContext } = require(\"react\");\n\nexport const ConfigContext = createContext()\n\nexport default function ConfigContextProvider(props)\n{\n    /** Сайтын тохиргоонуудыг халгалах state */\n    const [configs, setConfigs] = useState({})\n\n    /** Тохиргоог back аас авах */\n    const getConfigs = async () =>\n    {\n        /** Back аас авах config үүдийн нэрийн жагсаалт */\n        const names = 'FACEBOOK,INSTAGRAMM,YOUTUBE'\n        const { success, data, error } = await axios.get(`/api/config/?names=${names}`).catch(err => err)\n        if (success)\n        {\n            const valueOfConfigs = data.reduce(\n                (prevValue, currentValue) =>\n                {\n                    prevValue[currentValue.name] = currentValue.value\n                    return prevValue\n                },\n                {}\n            )\n            setConfigs(valueOfConfigs)\n        }\n        else\n        {\n            setConfigs({})\n        }\n\n    }\n\n    return (\n        <ConfigContext.Provider\n            value={{\n                configs,\n                getConfigs,\n            }}\n        >\n            {props.children}\n        </ConfigContext.Provider>\n    )\n}\n\nexport function useConfig()\n{\n    return useContext(ConfigContext)\n}\n"]},"metadata":{},"sourceType":"module"}